<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hjk.life/</id><title>普通人</title><subtitle>技术类的[博客]，[计算机]、[嵌入式]、[互联网]、[Linux]...</subtitle> <updated>2021-10-13T15:37:27+08:00</updated> <author> <name>Jinkai</name> <uri>https://hjk.life/</uri> </author><link rel="self" type="application/atom+xml" href="https://hjk.life/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://hjk.life/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 Jinkai </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>移植Docker到ARM嵌入式设备</title><link href="https://hjk.life/posts/docker-cross-compile/" rel="alternate" type="text/html" title="移植Docker到ARM嵌入式设备" /><published>2021-10-13T09:00:00+08:00</published> <updated>2021-10-13T15:36:43+08:00</updated> <id>https://hjk.life/posts/docker-cross-compile/</id> <content src="https://hjk.life/posts/docker-cross-compile/" /> <author> <name>Jinkai</name> </author> <category term="技术" /> <summary> 本文将会介绍如何对 Docker 源码进行交叉编译并将 Docker 相关组件移植到 arm 嵌入式设备上 Docker 源码下载 Docker 相关组件的源码已经移动到了 moby 库，在https://github.com/moby/moby获取源码，我这边使用的是moby-17.05.0-ce这个 tag，因为嵌入式设备的资源空间有限，而新版本的 Docker 由于集成了大量功能，导致耗费资源较多，可能跑不起来。 下载Source code： wget https://github.com/moby/moby/archive/refs/tags/v17.05.0-ce.tar.gz 解压到合适位置： tar -zxvf v17.05.0-ce.tar.gz 解压后目录如下图： 准备编译环境 Docker 编译需要在专用的 Docker 容器内进行，官方... </summary> </entry> <entry><title>软件设计模式——七大设计原则</title><link href="https://hjk.life/posts/design-patterns-principles/" rel="alternate" type="text/html" title="软件设计模式——七大设计原则" /><published>2021-09-16T09:00:00+08:00</published> <updated>2021-09-23T11:36:19+08:00</updated> <id>https://hjk.life/posts/design-patterns-principles/</id> <content src="https://hjk.life/posts/design-patterns-principles/" /> <author> <name>Jinkai</name> </author> <category term="技术" /> <summary> 概述 设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。 描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。 是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。 其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。 作用 提高思维能力、编程能力和设计能力。 使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。 使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。 7种开发原则 开闭原则 定义 Open Closed Principle，... </summary> </entry> <entry><title>简单证书注册协议(SCEP)详解</title><link href="https://hjk.life/posts/scep/" rel="alternate" type="text/html" title="简单证书注册协议(SCEP)详解" /><published>2021-09-09T09:00:00+08:00</published> <updated>2021-09-10T10:30:11+08:00</updated> <id>https://hjk.life/posts/scep/</id> <content src="https://hjk.life/posts/scep/" /> <author> <name>Jinkai</name> </author> <category term="技术" /> <summary> 本文将会介绍简单证书注册协议(Simple certificate enrollment protocol, SCEP)，并对整个证书签发流程做详细的分析 概述 SCEP(Simple certificate enrollment protocol)，简单证书注册协议，最初由 CISCO 起草，简而言之，就是一个用来注册数字证书的协议。 RFC 8894描述了简单的证书注册协议(SCEP)。该协议的旧版本成为实际工业标准，用于实际提供数字证书，主要用于网络设备。该协议旨在使任何标准网络用户的要求和颁发的数字证书尽可能简单。这些流程通常需要网络管理员的密集输入，因此不适合大规模部署。 简单的证书注册协议仍然是最受欢迎和广泛可用的证书注册协议，被许多网络设备和软件制造商使用，他们正在开发简化的处理证书的方法，以便向日常用户大规模实施。例如，思科 IOS 操作系统(即使思科正在推动... </summary> </entry> <entry><title>Linux系统中内存不足导致system()执行失败的问题</title><link href="https://hjk.life/posts/memory-fork-error/" rel="alternate" type="text/html" title="Linux系统中内存不足导致system()执行失败的问题" /><published>2021-09-08T09:00:00+08:00</published> <updated>2021-09-13T13:19:56+08:00</updated> <id>https://hjk.life/posts/memory-fork-error/</id> <content src="https://hjk.life/posts/memory-fork-error/" /> <author> <name>Jinkai</name> </author> <category term="技术" /> <summary> 在实际项目中遇到了现场大量设备升级后无法上线的问题，经过几天的分析发现是升级占用了大量内存导致system()函数执行失败，也就是无法通过C程序执行shell脚本，造成了设备异常。本文将对问题原因与解决方案做详细介绍 问题简介 现场设备挂网时间有1年多了，打算进行远程升级以支持更多功能与提高稳定性。首次选择了200个设备进行小批量验证，但升级成功率很低，有将近3/4的设备升级失败，且升级失败后大部分进入异常状态，无法进行通信，也就是处于离线状态。 两天后离线的设备陆续上线，推测原因可能是异常时间较长导致主进程崩溃，随即触发了硬件看门狗复位设备，且重新上线后设备各项功能都正常。 原因分析 首先是分析日志，对于还可以正常通信的设备的日志进行分析，发现升级失败原因为升级包校验失败，升级包的传输应该是不会有问题的，校验失败应该另有隐情。 仔细分析了报错信息后，发现频繁打印”scr... </summary> </entry> <entry><title>DHCPv6 relay的使用</title><link href="https://hjk.life/posts/dhcpv6-relay/" rel="alternate" type="text/html" title="DHCPv6 relay的使用" /><published>2021-09-08T09:00:00+08:00</published> <updated>2021-09-08T09:00:00+08:00</updated> <id>https://hjk.life/posts/dhcpv6-relay/</id> <content src="https://hjk.life/posts/dhcpv6-relay/" /> <author> <name>Jinkai</name> </author> <category term="技术" /> <summary> 本文将介绍如何使用DHCPv6 relay技术转发DHCPv6请求，包括widedhcpv6的交叉编译和配置 DHCPv6简介 在DHCPv6基础-曹世宏的博客一文对于DHCPv6协议做了详细的介绍，另可查看DHCPv6 IETF标准文档RFC8415，本文不再赘述。 DHCPv6 relay(中继代理)的作用就是将原来的DHCPv6多播(multicast)方式转化为单播(unicast)报文，从而可以跨网关传输DHCPv6的请求响应，一般的使用场景是DHCPv6客户端与服务器不在同一个链路的情况 工具 WIDE-DHCPv6 arm-none-linux-gnueabi-gcc(Sourcery CodeBench Lite 2014.05-29) 编译 实现DHCPv6 relay功能的开源工具并不多，而且很多已经长时间... </summary> </entry> </feed>
